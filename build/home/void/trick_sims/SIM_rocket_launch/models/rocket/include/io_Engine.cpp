/**
 * This file was automatically generated by the ICG based on the file:
 * /home/void/trick_sims/SIM_rocket_launch/models/rocket/include/Engine.hh
 * This file contains database parameter declarations specific to the
 * data structures and enumerated types declared in the above file.
 * These database parameters are used by the Trick input and
 * data recording processors to gain access to important simulation
 * variable information.
 */

#define TRICK_IN_IOSRC
#include <stdlib.h>
#include "trick/MemoryManager.hh"
#include "trick/attributes.h"
#include "trick/parameter_types.h"
#include "trick/ClassSizeCheck.hh"
#include "trick/UnitsMap.hh"
#include "trick/checkpoint_stl.hh"
#include "/home/void/trick_sims/SIM_rocket_launch/models/rocket/include/Engine.hh"

extern "C" {

ATTRIBUTES attrEngine[] = {
{"engineMass", "double", "kg", "", "",
  "Mass of engine casing",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  0, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"fuelMass", "double", "kg", "", "",
  "Mass of fuel in engine",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  8, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"operationalTime", "double", "s", "", "",
  "Time the engine is in use",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  16, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"thrust", "double", "kg*m/s^2", "", "",
  "",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 0,
  24, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"massFlowRate", "double", "1", "", "",
  "Amount of mass lost per second",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  32, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"", "", "1", "", "",
  "",
  15,TRICK_VOID, 0, 0, 0, Language_CPP, 0,
  0, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL} };

} //extern "C"


void init_attrEngine() {

    static int initialized ;
    if (initialized) {
        return;
    }
    initialized = 1;

}

extern "C" {

void init_attrEngine_c_intf() {
    init_attrEngine() ;
}

size_t io_src_sizeof_Engine() {
    return sizeof(Engine) ;
}

void* io_src_allocate_Engine(int num) {
    Engine* temp = (Engine*)calloc(num, sizeof(Engine));
    return (void*)temp;
}

void io_src_destruct_Engine(void* address __attribute__((unused)), int num __attribute__((unused))) {
}

void io_src_delete_Engine(void* address __attribute__((unused))) {}

} //extern "C"

struct UnitsMapEngine {
    UnitsMapEngine() {
        Trick::UnitsMap* units_map_ptr = Trick::UnitsMap::units_map();
        units_map_ptr->add_param("Engine_engineMass", "kg") ;
        units_map_ptr->add_param("Engine_fuelMass", "kg") ;
        units_map_ptr->add_param("Engine_operationalTime", "s") ;
        units_map_ptr->add_param("Engine_thrust", "kg*m/s^2") ;
        units_map_ptr->add_param("Engine_massFlowRate", "1") ;
    }
} umEngine;

